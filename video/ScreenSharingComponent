<template>
    <div class="container">
        <p>This example shows you the contents of the selected part of your display.
            Click the Start Capture button to begin.</p>

        <p>
            <button
                id="start"
                @click="startCapture"
            >Start Capture</button>
            <button
                id="stop"
                @click="stopCapture"
            >Stop Capture</button>
        </p>

        <video
            v-if="displayStream"
            id="video"
            autoplay
            ref="videoElem"
        ></video>
        <br>

        <strong>Log:</strong>
        <br>
        <pre id="log"></pre>
    </div>
</template>

<script>
    export default {
        data() {
            return {
                displayMediaOptions : {
                    video: {
                        cursor: "always",
                        frameRate: 60
                    },
                    audio: false
                },
                audioMediaOptions: {
                    audio: true,
                    video: false
                },
                displayStream: null,
                audioStream: null,
                mimeType: 'video/webm',
                stopped: true,
                shouldStop: false,
                mediaRecorder: null,
                recordedChunks: []
            }
        },
        computed: {
            tracks() {
                return [
                    ...this.displayStream.getTracks(),
                    ...this.voiceStream.getAudioTracks()
                ]
            }
        },
        methods: {
            async startCapture() {
                try {
                    this.displayStream = await navigator.mediaDevices.getDisplayMedia(this.displayMediaOptions);
                    this.voiceStream = await navigator.mediaDevices.getUserMedia(this.audioMediaOptions);

                    this.$refs.videoElem.srcObject = this.displayStream;

                    const stream = new MediaStream(this.tracks);
                    this.shouldStop = false;
                    this.handleRecord(stream);
                    this.dumpOptionsInfo();
                } catch(err) {
                    console.error("Error: " + err);
                }
            },
            stopCapture(evt) {
                let tracks = this.$refs.videoElem.srcObject.getTracks();

                tracks.forEach(track => track.stop());
                this.$refs.videoElem.srcObject = null;
                this.shouldStop = true;
                this.mediaRecorder.stop();
            },
            dumpOptionsInfo() {
                const videoTrack = this.$refs.videoElem.srcObject.getVideoTracks()[0];

                console.info("Track settings:");
                console.info(JSON.stringify(videoTrack.getSettings(), null, 2));
                console.info("Track constraints:");
                console.info(JSON.stringify(videoTrack.getConstraints(), null, 2));
            },
            handleRecord(stream) {
                // to collect stream chunks
                this.recordedChunks = [];
                this.stopped = false;
                this.mediaRecorder = new MediaRecorder(stream);

                this.mediaRecorder.ondataavailable = this.onDataAvailable;
                this.mediaRecorder.onstop = this.onStop;

                this.mediaRecorder.start(200); // here 200ms is interval of chunk collection
            },
            onDataAvailable(event) {
                if (event.data.size > 0) {
                    this.recordedChunks.push(event.data);
                }
                // shouldStop => forceStop by user
                if (this.shouldStop === true && this.stopped === false) {
                    this.mediaRecorder.stop();
                    this.stopped = true;
                }
            },
            onStop() {
                const blob = new Blob(this.recordedChunks, {
                    type: this.mimeType
                });
                console.log(blob);
                this.recordedChunks = []
                const filename = 'test';
                window.open(URL.createObjectURL(blob));
                console.log([
                    URL.createObjectURL(blob),
                    `${filename}.webm`
                ]);
            }
        }
    }
</script>

<style>
#video {
    border: 1px solid #999;
    width: 98%;
    max-width: 860px;
}

.error {
    color: red;
}

.warn {
    color: orange;
}

.info {
    color: darkgreen;
}
</style>
